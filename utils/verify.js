const jwt = require('jsonwebtoken');
const jwt_secret = process.env.JWT_SECRET || require('./config').JWT_SECRET;

exports.user = function(req, res, next) {
    //grab the token from the request
    let token = req.body.token || req.headers['authorization'] || req.headers['Authorization'];

    //if token exists
    if (token) {
        //check if token is the Bearer XXXXX.. format
        token = /^(Bearer\s\S*)$/.test(token) ? token.split(' ')[1] : token;

        //verify the token
        jwt.verify(token, jwt_secret, function(err, decoded) {
            //Invalid token
            if(err) {
                return res.status(401).json({
                    message: `Invalid token`,
                    error: err
                });
            }

            //check if the token contains userID and email
            if (decoded.id && decoded.email) {
                req.decoded = decoded;
                if (decoded.team){
                    next(); //if yes, Authorization success
                }else {
                    return res.status(202).json({
                        message: `Team id Missing`,
                        error: `User isn't part of any Team`
                    });
                }
            }else { //the token is not generated by the server. 401!
                return res.status(401).json({
                    message: `Invalid token`,
                    error: `Malformed or intercepted token`
                });
            }

        });
    } else { //token unavailable in the request
        return res.status(401).json({
            message: `Authorization required`
        });
    }
}


exports.admin = function(req, res, next) {
    //grab the token from the request
    let token = req.body.token || req.headers['authorization'] || req.headers['Authorization'];

    //if token exists
    if (token) {
        //check if token is the Bearer XXXXX.. format
        token = /^(Bearer\s\S*)$/.test(token) ? token.split(' ')[1] : token;

        //verify the token
        jwt.verify(token, jwt_secret, function(err, decoded) {
            //Invalid token
            if(err) {
                return res.status(401).json({
                    message: `Invalid token`,
                    error: err
                });
            }

            //check if the token contains userID, email and admin field
            if (decoded.id && decoded.email && decoded.admin && decoded.admin === true) {
                req.decoded = decoded;
                next(); //if yes, Authorization success
            }else { //the token is not generated by the server. 401!
                return res.status(401).json({
                    message: `Invalid token`,
                    error: `Malformed or intercepted token`
                });
            }

        });
    } else { //token unavailable in the request
        return res.status(401).json({
            message: `Authorization required`
        });
    }
}
